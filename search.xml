<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用pnpm取代萬年npm、yarn及nvm</title>
      <link href="/20220927/3203098553/"/>
      <url>/20220927/3203098553/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/20220927145753.jpeg" alt="img"></p><h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><p>npm 最令人詬病的問題：</p><ul><li>套件浪費大量硬碟容量，有100個專案需要使用同一種套件(1MB)，就浪費100倍的硬碟容量(100MB)。</li><li>套件安裝速度較慢</li><li>扁平化的 node_modules 結構</li></ul><p>pnpm 能解決以下兩點問題：</p><ul><li>硬碟空間利用率非常高，使用同一個套件位置，當多個專案需要時，使用硬連結方式共享同版本的套件。</li><li>套件安裝速度比 npm 快</li></ul><p>基於以上兩點，再加上能夠使用 pnpm 來管理 node.js 的版本，能以一抵三（npm、yarn、nvm）。</p><h1 id="移除nvm"><a href="#移除nvm" class="headerlink" title="移除nvm"></a>移除nvm</h1><ol><li><p>在終端機中輸入：<code>rm -rf $NVM_DIR</code></p></li><li><p>開啟 <code>~/.zshrc</code> 清除有關 <code>nvm</code> 相關的環境設定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nvm &amp; node</span></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure></li></ol><h1 id="安裝pnpm"><a href="#安裝pnpm" class="headerlink" title="安裝pnpm"></a>安裝pnpm</h1><h2 id="獨立腳本安裝pnpm"><a href="#獨立腳本安裝pnpm" class="headerlink" title="獨立腳本安裝pnpm"></a>獨立腳本安裝pnpm</h2><p>官網有<a href="https://pnpm.io/zh/installation">說明</a>，在沒有預先安裝 node.js 的情況下，可以使用獨立腳本安裝pnpm，新系統適合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.pnpm.io/install.sh | sh -</span><br></pre></td></tr></table></figure><p>如果沒有 curl，也可以使用 wget：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.pnpm.io/install.sh | sh -</span><br></pre></td></tr></table></figure><p>Windows（使用PowerShell）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwr https://get.pnpm.io/install.ps1 -useb | iex</span><br></pre></td></tr></table></figure><p>然後就可以使用 <a href="https://pnpm.io/zh/cli/env">pnpm env</a> 指令来安装 Node.js。</p><h2 id="Homebrew安裝"><a href="#Homebrew安裝" class="headerlink" title="Homebrew安裝"></a>Homebrew安裝</h2><p>在沒有預先安裝 node.js 的環境下，如果要使用 <code>pnpm env</code> 來管理 node 版本，不適合使用 Homebrew 安裝 pnpm，新系統也不適合，因為系統需要先有 node 環境才可以執行 pnpm 的 CLI，否則會出現 <code>env: node: No such file or directory</code> 的訊息。</p><p>而我的情況是，因為已經先把 nvm 移除掉了，系統中已經沒有 node 環境了，除非要先把 <code>pnpm env</code> 的 node 環境安裝好，才將 nvm 移除。</p><p>Homebrew：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pnpm</span><br></pre></td></tr></table></figure><h1 id="pnpm-env取代nvm"><a href="#pnpm-env取代nvm" class="headerlink" title="pnpm env取代nvm"></a>pnpm env取代nvm</h1><p>管理 node.js 執行環境</p><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><p>安裝並使用指定版本的 Node.js。</p><p>安裝LTS版本的 Node.js：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm env use --global lts</span><br></pre></td></tr></table></figure><p>安裝指定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm env use --global 14</span><br></pre></td></tr></table></figure><h2 id="remove-rm"><a href="#remove-rm" class="headerlink" title="remove, rm"></a>remove, rm</h2><p>移除特定的 Node.js 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm env remove --global 14.0.0</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://juejin.cn/post/7077760907782127647">使用 pnpm 替代 yarn, npm, nvm</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
            <tag> nvm </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造自己專屬的iTerm2</title>
      <link href="/20220915/3359711851/"/>
      <url>/20220915/3359711851/</url>
      
        <content type="html"><![CDATA[<h1 id="打造自己專屬的-iTerm2"><a href="#打造自己專屬的-iTerm2" class="headerlink" title="打造自己專屬的 iTerm2"></a>打造自己專屬的 iTerm2</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>紀錄一下自己在使用 iTerm2 時的一些開發環境設定，不然每次更新或重裝系統時，都會忘。</p><h2 id="Package-Manager-套件管理工具"><a href="#Package-Manager-套件管理工具" class="headerlink" title="Package Manager 套件管理工具"></a>Package Manager 套件管理工具</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>macOS 的使用者一定對<a href="https://brew.sh/index_zh-tw"><strong>Homebrew</strong></a>不陌生吧。</p><p><a href="https://brew.sh/index_zh-tw"><strong>Homebrew</strong></a>是一套 macOS 上很好用的套件軟體管理工具，他可以只用指令就幫你快速的安裝好你所需要的工具。</p><h4 id="安裝-Homebrew"><a href="#安裝-Homebrew" class="headerlink" title="安裝 Homebrew"></a>安裝 Homebrew</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><h4 id="搜尋套件"><a href="#搜尋套件" class="headerlink" title="搜尋套件"></a>搜尋套件</h4><p>可以使用<code>$brew search</code>來搜尋想安裝的套件或軟體，輸入關鍵字會出現名稱雷同的套件供你查詢。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search git</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20220914235613910.png" alt="image-20220914235613910" style="zoom:50%;" /><h4 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h4><p>安裝套件的方式很簡單，如果不確定套件名稱是否正確可以先搜尋。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install iterm2</span><br></pre></td></tr></table></figure><h4 id="更新套件"><a href="#更新套件" class="headerlink" title="更新套件"></a>更新套件</h4><p>正常是三個步驟，但這是三個不同指令合在一起使用，比較方便。</p><ul><li><code>brew update</code>：更新 Homebrew 及套件清單</li><li><code>brew upgrade</code>：更新所有套件</li><li><code>brew cleanup</code>：清除所有套件的舊版本或暫存檔</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup</span><br></pre></td></tr></table></figure><h4 id="一些常使用的指令"><a href="#一些常使用的指令" class="headerlink" title="一些常使用的指令"></a>一些常使用的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew search TEXT|/REGEX/         # 搜尋FORMULA|CASK</span><br><span class="line">brew info [FORMULA|CASK...]      # 查看FORMULA|CASK的資訊</span><br><span class="line">brew install FORMULA|CASK...     # 安裝FORMULA|CASK</span><br><span class="line">brew update                      # 更新Homebrew及套件清單</span><br><span class="line">brew upgrade [FORMULA|CASK...]   # 更新套件（所有/指定）</span><br><span class="line">brew reinstall FORMULA|CASK...   # 重新安裝套件</span><br><span class="line">brew uninstall FORMULA|CASK...   # 移除套件</span><br><span class="line">brew cleanup                     # 清除所有套件的舊版本或暫存檔</span><br><span class="line">brew cleanup -n                  # 查看可清理的舊版本套件，但不執行實際操作</span><br><span class="line">brew list                        # 查看所有已安裝的FORMULA|CASK</span><br><span class="line">brew outdated                    # 檢查已安裝的套件中是否有更新版</span><br><span class="line">brew -v --version                # 查看Homebrew版本</span><br></pre></td></tr></table></figure><h4 id="特殊指令"><a href="#特殊指令" class="headerlink" title="特殊指令"></a>特殊指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew tap：適用於安裝不在 homebrew 的第三方套件（會增加 homebrew 的 formulae）</span></span><br><span class="line">brew tap                         # 查看目前已tapped的repositories</span><br><span class="line">brew tap &lt;tap-name&gt;              # 新增repository</span><br><span class="line">brew untap &lt;tap-name&gt;            # 移除已tapped的repository</span><br><span class="line"></span><br><span class="line">brew doctor                      # 檢查Homebrew有沒有問題</span><br></pre></td></tr></table></figure><hr><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><p>使用 iTerm2 + zsh + Oh My ZSH 配置。</p><p>zsh 自 macOS 系統為 Catalina 版本後，就已經取代原本的 bash 了，所以不需要再額外安裝。</p><h3 id="字體"><a href="#字體" class="headerlink" title="字體"></a>字體</h3><p>因為等一下要安裝 Oh My ZSH 的主題，會有很多符號圖示，一般的字體會有字體缺失的問題，所以需要額外安裝<a href="https://github.com/powerline/fonts"><strong>Powerline-Fonts</strong></a>或<a href="https://www.nerdfonts.com/"><strong>Nerd-Fonts</strong></a> 。</p><p>早期都是安裝 Powerline，現在有新的選擇可以使用 Nerd-Fonts，它已將 Powerline-Fonts、Font Awesome 等多樣圖示整合進去。</p><p>我選擇使用 Nerd-Fonts 的<code>font-meslo-lg-nerd-font</code>。</p><h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><p>字型都可以使使用 Homebrew 來安裝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts   # You only need to do this once!</span><br><span class="line">brew search nerd               # 查看有哪些字型可以安裝</span><br><span class="line">brew install font-meslo-lg-nerd-font</span><br></pre></td></tr></table></figure><hr><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p><a href="https://iterm2.com/index.html"><strong>iTerm2</strong></a>是一個可以取代 macOS 自帶的終端機工具，擁有許多更方便的功能跟特色。</p><h4 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure><p>不習慣使用<a href="https://brew.sh/index_zh-tw"><strong>Homebrew</strong></a>安裝的朋友，可以到 iTerm2 的<a href="https://iterm2.com/downloads.html"><strong>Download</strong></a>頁面去下載安裝。</p><h4 id="設置"><a href="#設置" class="headerlink" title="設置"></a>設置</h4><h5 id="主題顏色"><a href="#主題顏色" class="headerlink" title="主題顏色"></a>主題顏色</h5><p>當然最重要的就是改主題顏色啦！</p><p><a href="https://iterm2colorschemes.com/"><strong>Iterm2-color-schemes</strong></a>裡面有許多配色可供選擇，我個人習慣使用<a href="https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Tomorrow%20Night%20Eighties.itermcolors"><strong>Tomorrow Night Eighties</strong></a>這個配色。</p><p>下載取得副檔名為<code>.itermcolors</code>檔案後，打開 iTerm2，快捷鍵<code>cmd+i</code>打開<code>preferences</code>，選擇<code>Profiles</code>頁面 →<code>Colors</code>頁面 → 左下角下拉選單選擇<code>import</code>，把剛剛下載的配色<code>.itermcolors</code>匯入，之後再下拉選單選擇該配色選項。</p><p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20220915005631442.png"></p><h5 id="設定字型"><a href="#設定字型" class="headerlink" title="設定字型"></a>設定字型</h5><p>設定字型一樣在<code>Profiles</code>頁面 →<code>Text</code>頁面中的 Font 下拉選單中選取<code>MesloLGM Nerd Font Mono</code>。</p><p>其實還有其他大小可以選擇，有<code>MesloLGL Nerd Font Mono</code>及<code>MesloLGS Nerd Font Mono</code>，端看自己習慣選擇。</p><p>下面還有一個<code>Use a different font for non-ASCII text</code>選項可打勾，但我目前不知道沒勾有沒有影響。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20220915041315574.png" alt="image-20220915041315574" style="zoom:50%;" /><hr><h3 id="Oh-My-ZSH"><a href="#Oh-My-ZSH" class="headerlink" title="Oh My ZSH"></a>Oh My ZSH</h3><p><a href="https://ohmyz.sh/"><strong>Oh My ZSH</strong></a>是一套強大的框架，集合了很多好用的主題&#x2F;套件來管理 zsh。</p><h4 id="安裝-2"><a href="#安裝-2" class="headerlink" title="安裝"></a>安裝</h4><p>安裝方式跟 Homebrew 一樣簡單，沒什麼好說的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h4 id="設置-1"><a href="#設置-1" class="headerlink" title="設置"></a>設置</h4><p>安裝完成後，可以修改主題&#x2F;新增套件，Oh My ZSH 內建很多<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes"><strong>Themes</strong></a>可供選擇。</p><p>首先我們要先打開他的設置<code>~/.zshrc</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure><p>有很多設定可以改，我就只說明一些常用的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;           #設定Theme主題名稱，以agnoster主題為例</span><br><span class="line">plugins=( plugin1 plugin2 ... )# plugins以空格分開。</span><br><span class="line">DEFAULT_USER=$(whoami)         # 新增此行設定不顯示最前面的Prompt(neil@neildeMBP)，有多種寫法，要看Theme設定。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中文可能需要以下設定</span></span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>以下提供兩種安裝方式：</p><ul><li>Homebrew 安裝在 zsh 中</li><li>安裝到 Oh My ZSH 中管理 (recommend )</li></ul><h5 id="Zsh-autosuggestions"><a href="#Zsh-autosuggestions" class="headerlink" title="Zsh-autosuggestions"></a>Zsh-autosuggestions</h5><p><a href="https://github.com/zsh-users/zsh-autosuggestions"><strong>zsh-autosuggestion</strong></a> 是一款指令(command)補全提示的 Plugin。</p><ul><li><p>使用 Homebrew 安裝在 zsh（沒有 Oh My ZSH 也能安裝)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>安裝完成後，需到<code>.zshrc</code>中添加以下代碼 activate 此 Plugins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure><p>重新開啟 iTerm2</p></li><li><p>安裝在 Oh My ZSH 中</p><ol><li><p>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li><p>Add the plugin to the list of plugins for Oh My Zsh to load (inside <code>~/.zshrc</code>):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>提示不明顯，修改提示顏色（Xterm_256color）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/neil/.oh-my-zsh/custom/plugins/zsh-autosuggestions/</span><br><span class="line">vim zsh-autosuggestions.zsh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到這行指令，可修改字體顏色、背景顏色、字體樣式</span></span><br><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&quot;fg=#ff00ff,bg=cyan,bold,underline&quot; # 官方範例</span><br><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&quot;fg=#B8860B,bold,underline&quot;         # 僅修改字體顏色、粗體、下底線</span><br></pre></td></tr></table></figure></li><li><p>重新開啟 iTerm2</p></li></ol></li></ul><h5 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h5><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting"><strong>zsh-syntax-highlighting</strong></a> 語法高亮：語法指令錯誤時顯示紅色，直到輸入正確才會變綠色。</p><ul><li><p>使用 Homebrew 安裝在 zsh（沒有 Oh My ZSH 也能安裝)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>安裝完成後，需到<code>.zshrc</code>中添加以下代碼 activate 此 Plugins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><p>重新開啟 iTerm2</p></li><li><p>安裝在 Oh My ZSH 中</p><ol><li><p>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li><p>Add the plugin to the list of plugins for Oh My Zsh to load (inside <code>~/.zshrc</code>):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>重新開啟 iTerm2</p></li></ol></li></ul><h5 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a>git-open</h5><p><a href="https://github.com/paulirish/git-open"><strong>git-open</strong></a>可以讓你輸入 <code>git open</code> 在瀏覽器中打開該 repo 的網站(GitHub, GitLab, Bitbucket)。</p><p>安裝在 Oh My ZSH 中</p><ol><li><p>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open</span><br></pre></td></tr></table></figure></li><li><p>Add the plugin to the list of plugins for Oh My Zsh to load (inside <code>~/.zshrc</code>):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    git-open</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>重新開啟 iTerm2</p></li></ol><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在裝完 Oh My ZSH 時，我的 nvm、node、npm 指令都無法使用了<code>zsh: command not found: nvm</code>，去查看一下<code>.nvm</code>資料夾還在，只是在<code>.zshrc</code>中的 nvm 指向不見了，重新貼回去就可以用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打開.zshrc將以下指令貼上就能恢復了</span></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><h2 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h2><p>折騰了這麼久，終於搞定了個自己比較習慣的樣式，Plugin 不想裝太多，怕之後 iTerm2 開啟速度會變慢。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20220915201722749.png" alt="image-20220915201722749" style="zoom:50%;" /><blockquote><p><a href="https://jianna9527.coderbridge.io/2021/06/26/iterm-oh-my-zsh/">使用 iTerm2 來個漂亮好用的終端機</a> &gt; <a href="https://gist.github.com/kevin-smets/8568070">iTerm2 + Oh My Zsh + Solarized color scheme + Source Code Pro Powerline + Font Awesome + [Powerlevel10k] - (macOS)</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
            <tag> brew </tag>
            
            <tag> iterm2 </tag>
            
            <tag> iterm </tag>
            
            <tag> zsh </tag>
            
            <tag> Terminal </tag>
            
            <tag> 終端機 </tag>
            
            <tag> oh my zsh </tag>
            
            <tag> nerd-fonts </tag>
            
            <tag> powerline-fonts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora寫文章利用PicGo-core將圖片上傳至Github</title>
      <link href="/20210522/4155743247/"/>
      <url>/20210522/4155743247/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-寫文章利用-PicGo-core-將圖片上傳至-Github"><a href="#Typora-寫文章利用-PicGo-core-將圖片上傳至-Github" class="headerlink" title="Typora 寫文章利用 PicGo-core 將圖片上傳至 Github"></a>Typora 寫文章利用 PicGo-core 將圖片上傳至 Github</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近打算開始在 Github page 上寫些 Blog，以前都只是寫些備忘錄存放在本機，圖片也都是存放在本機的資料夾中，但因為現在有寫 Blog 的因素，圖片的存放無法再只是存放在本機，所以這邊打算利用 PicGo-Core 來將文章中的圖片自動上傳到 Github 的 repo 中，並提取出連結替換 Markdown 文章中的圖片位址。</p><h2 id="安裝-PicGo-Core"><a href="#安裝-PicGo-Core" class="headerlink" title="安裝 PicGo-Core"></a>安裝 PicGo-Core</h2><p><a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo-Core</a>是個 Node.js 開發的自動上傳圖片 Command Line Tool，本身也有 APP 版本，但 MacOS 要使用 Typora 自動上傳的話，似乎只能使用 Core 這個版本，而 PicGo 本身也有許多大神為他開發了不少<a href="https://github.com/PicGo/Awesome-PicGo">Plugin</a>可供使用。</p><blockquote><p><strong><em>輸入<code>node -v</code>確認系統 Node 版本 &gt;&#x3D; 8.0。</em></strong></p></blockquote><h3 id="全局安裝"><a href="#全局安裝" class="headerlink" title="全局安裝"></a>全局安裝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安裝</span></span><br><span class="line">npm install picgo -g 或是 yarn global add picgo</span><br></pre></td></tr></table></figure><p>也有單獨針對專案項目的單獨項目安裝方式，但要使 Typora 有自動上傳圖片功能，使用全局安裝即可。</p><h2 id="Github-新增專門放圖片的-repo"><a href="#Github-新增專門放圖片的-repo" class="headerlink" title="Github 新增專門放圖片的 repo"></a>Github 新增專門放圖片的 repo</h2><ol><li><p>首先你必須要有一個 Github 的帳號。</p></li><li><p>創建一個新的 Repository</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/%E6%88%AA%E5%9C%96%202021-05-21%20%E4%B8%8B%E5%8D%888.02.01.png" alt="截圖 2021-05-21 下午8.02.01" style="zoom:50%;" /><blockquote><p><strong>Repository name：</strong>PicBed （可自行填寫）</p><p><strong>Description：</strong>For PicGo-Core Image Uploader (描述該 Repository 的用途)</p><p><strong>選擇 Public</strong></p><p><strong>只是存放圖片無需新增 README file 及.gitignore</strong></p></blockquote><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210521200851182.png" alt="image-20210521200851182" style="zoom:50%;" /></li><li><p>新增一個<a href="https://github.com/settings/tokens">Token</a>。</p><blockquote><p>Settings &#x2F; Developer settings &#x2F; Personal access tokens → **<code>Generate new token</code>**。</p></blockquote><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210521203543395.png" alt="image-20210521203543395" style="zoom:50%;" /><p>僅勾選 repo 讓 PicGo-Core 能夠存取你的 Repository，然後滑到最下面點擊**<code>Generate token</code>**。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210521204017893.png" alt="image-20210521204017893" style="zoom:50%;" /><blockquote><p><strong><em>當產生新的 Token 時，要注意 Token 只會顯示在當前頁面，之後無法從其他地方讀取到此 Token，要保存好。</em></strong></p></blockquote></li></ol><h2 id="PicGo-Core-設置-Github-repo-相關設定"><a href="#PicGo-Core-設置-Github-repo-相關設定" class="headerlink" title="PicGo-Core 設置 Github repo 相關設定"></a>PicGo-Core 設置 Github repo 相關設定</h2><p>設定 Github 的 Configuration。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// Repository，格式是 username/reponame</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// github token</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定義路徑，比如 img/</span></span><br><span class="line">  <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定義域名，注意要加 http://或者 https://</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 分支名，默認是 main</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>輸入**<code>picgo set uploader</code>**，選擇 GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo set uploader</span><br><span class="line">? Choose a(n) uploader (Use arrow keys)</span><br><span class="line">  smms</span><br><span class="line">  tcyun</span><br><span class="line">❯ github</span><br><span class="line">  qiniu</span><br><span class="line">  imgur</span><br><span class="line">  aliyun</span><br><span class="line">  upyun</span><br></pre></td></tr></table></figure><p>設定相關設置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo <span class="built_in">set</span> uploader</span><br><span class="line">? Choose a(n) uploader github</span><br><span class="line">? repo: NeiL978/PicBed</span><br><span class="line">? branch: master</span><br><span class="line">? token: ghp_vxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">? path: img/</span><br><span class="line">? customUrl:</span><br><span class="line">[PicGo SUCCESS]: Configure config successfully!</span><br></pre></td></tr></table></figure><p>由於 PicGo-core 預設上傳圖床是 smms 圖床，需修改為 GitHub。</p><p>輸入**<code>picgo use uploader</code>**，選擇 GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo use uploader</span><br><span class="line">? Use an uploader (Use arrow keys)</span><br><span class="line">  smms</span><br><span class="line">  tcyun</span><br><span class="line">❯ github</span><br><span class="line">  qiniu</span><br><span class="line">  imgur</span><br><span class="line">  aliyun</span><br><span class="line">  upyun</span><br></pre></td></tr></table></figure><h2 id="測試-PicGo-Core-是否能夠將圖片上傳至-repo"><a href="#測試-PicGo-Core-是否能夠將圖片上傳至-repo" class="headerlink" title="測試 PicGo-Core 是否能夠將圖片上傳至 repo"></a>測試 PicGo-Core 是否能夠將圖片上傳至 repo</h2><p>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo upload /xxx/xxx.jpg</span><br></pre></td></tr></table></figure><p>結果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo upload /Users/neil/Desktop/Git指令速查表.jpg</span><br><span class="line">[PicGo INFO]: Before transform</span><br><span class="line">[PicGo INFO]: Transforming... Current transformer is [path]</span><br><span class="line">[PicGo INFO]: Before upload</span><br><span class="line">[PicGo INFO]: Uploading... Current uploader is [github]</span><br><span class="line">[PicGo SUCCESS]:</span><br><span class="line">https://raw.githubusercontent.com/NeiL978/PicBed/master/img/Git指令速查表.jpg</span><br></pre></td></tr></table></figure><h2 id="設置-Typora-使用-PicGo-Core-自動上傳圖片"><a href="#設置-Typora-使用-PicGo-Core-自動上傳圖片" class="headerlink" title="設置 Typora 使用 PicGo-Core 自動上傳圖片"></a>設置 Typora 使用 PicGo-Core 自動上傳圖片</h2><p>現在 PicGo-Core 的設置都設定好了，接下來就要實現 Typora 自動上傳的功能。</p><p>首先先取得 picgo 及 node 的安裝路徑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % <span class="built_in">which</span> picgo</span><br><span class="line">/Users/neil/.nvm/versions/node/v14.17.0/bin/picgo</span><br><span class="line">neil@NeiLdeMBP ~ % <span class="built_in">which</span> node</span><br><span class="line">/Users/neil/.nvm/versions/node/v14.17.0/bin/node</span><br></pre></td></tr></table></figure><p>取得路徑後，在 Typora 中的偏好設定 → 圖片中設定。</p><p>Image uploader Command：</p><blockquote><p>路徑為[your node path] [your picgo-core path] upload</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.nvm時的路徑</span></span><br><span class="line">/Users/neil/.nvm/versions/node/v14.17.0/bin/node /Users/neil/.nvm/versions/node/v14.17.0/bin/picgo upload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pnpm時的路徑</span></span><br><span class="line">/Users/neil/Library/pnpm/nodejs/16.17.1/bin/node /Users/neil/Library/pnpm/global/5/.pnpm/picgo@1.5.0-alpha.0/node_modules/picgo/bin/picgo upload</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210521213648847.png" alt="image-20210521213648847" style="zoom:50%;" /><p>現在已經設定好了，可以點左下角的<code>Test Uploader</code>試試看效果。</p><p>可以看到圖片已經成功上傳到 github 了。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210521214102701.png" alt="image-20210521214102701" style="zoom:50%;" /><p>到 GitHub 的 Repository 中看看，已經能夠看到剛剛上傳的兩張 Typora icon 的 png 圖片了。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/%E6%88%AA%E5%9C%96%202021-05-21%20%E4%B8%8B%E5%8D%889.43.03.png" alt="截圖 2021-05-21 下午9.43.03" style="zoom:50%;" /><h2 id="讓圖片能同時儲存到本機及-Github-圖床上"><a href="#讓圖片能同時儲存到本機及-Github-圖床上" class="headerlink" title="讓圖片能同時儲存到本機及 Github 圖床上"></a>讓圖片能同時儲存到本機及 Github 圖床上</h2><p>但單單只是儲存在 github 上，也不是個相當安全的做法，最好還是在本機存一份備份。</p><p>所以我們需要在剛剛的圖片設置中，將<code>Upload image</code>改為<code>複製圖片到資料夾 ./$&#123;filename&#125;.assets</code>。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/%E6%88%AA%E5%9C%96%202021-05-21%20%E4%B8%8B%E5%8D%889.54.29.png" alt="截圖 2021-05-21 下午9.54.29" style="zoom:50%;" /><p>那現在每當新增圖片到文章中時，都會先在同文章的位置新增一個和文章同名的.assets 資料夾，並把圖片存放其中，但因為 Typora 只能選擇<code>Upload image</code>或是<code>複製圖片到資料夾</code>並無法同時進行，所以我們需要在圖片加入文章的時候，對圖片按右鍵，手動選擇<code>Upload Image</code>，Typora 就能將圖片上傳到 github 的 Ropository 中，並將文章中圖片的路徑改為 github 的圖片網址了，這樣我們的需求就已經達成了。</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>可以在PicGo官方的<a href="https://github.com/PicGo/Awesome-PicGo">Awesome-PicGo</a>裡找到許多由其他開發者協助開發的Plugin。</p><h3 id="picgo-plugin-compress"><a href="#picgo-plugin-compress" class="headerlink" title="picgo-plugin-compress"></a>picgo-plugin-compress</h3><p>為了優化Blog的讀取速度，我選擇了<a href="https://github.com/JuZiSang/picgo-plugin-compress">picgo-plugin-compress</a>來壓縮上傳到圖床的圖片。</p><p>可以選擇<a href="https://tinypng.com/">TinyPNG</a>、<a href="https://github.com/imagemin/imagemin">ImageMin</a>壓縮方式，也有將<code>JPG</code>,<code>JPEG</code>, <code>PNG</code>, <code>BMP</code>, <code>GIF</code> 轉碼成<code>Webp</code>格式的<a href="https://github.com/osgochina/image2webp">image2webp</a>。</p><p>安裝：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo add compress</span><br></pre></td></tr></table></figure><p>Transformer選擇<code>compress</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo use transformer</span><br><span class="line">? Use a transformer (Use arrow keys)</span><br><span class="line">  path</span><br><span class="line">  base64</span><br><span class="line">❯ compress</span><br></pre></td></tr></table></figure><p>選擇壓縮方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo config plugin compress</span><br><span class="line">? 选择压缩库 (Use arrow keys)</span><br><span class="line">❯ tinypng</span><br><span class="line">  imagemin</span><br><span class="line">  image2webp</span><br><span class="line"></span><br><span class="line">? 选择压缩库 tinypng</span><br><span class="line">? 申请key，不填默认使用WebAp，逗号隔开，可使用多个Key叠加使用次数 XXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p>key為可選項目：</p><ul><li>可以到TinyPNG的<a href="https://tinypng.com/developers">developers</a>中申請，免費用戶為每月有500次壓縮次數限制。</li><li>可以申請多組key疊加使用，以<code>,</code>隔開。</li></ul><h3 id="picgo-plugin-super-prefix"><a href="#picgo-plugin-super-prefix" class="headerlink" title="picgo-plugin-super-prefix"></a>picgo-plugin-super-prefix</h3><p>因為PicGo-core本身並沒有圖片重新命名的功能（<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>GUI版本有此功能），需要Plugin來協助，使用<a href="https://github.com/gclove/picgo-plugin-super-prefix">picgo-plugin-super-prefix</a>以時間戳命名上傳。</p><p>安裝：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neil@NeiLdeMBP ~ % picgo add super-prefix</span><br></pre></td></tr></table></figure><p>設定：</p><p>打開<code>/.picgo/config.json</code>將<code>&quot;picgo-plugin-super-prefix&quot;: true</code>加到<code>&quot;picgoPlugins&quot;</code>底下，將</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;fileFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDDHHmmss&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>加到json下方。</p><p>完整json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;github&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXX/PicBed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ghp_XXXXXXXXXXXXXXXXXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transformer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compress&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-compress&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgo-plugin-compress&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tinypng&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXXXXXXXXXXXXX&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDDHHmmss&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>由於我將文章儲存在 Onedrive 資料夾中，所以現在就已經達成了將圖片上傳到 github 上，及備份到本機和 Onedrive 雲端空間中，未來若是 Github 上的圖片消失了，將來還是能夠在 Onedrive 中取得備份的圖檔。</p><blockquote><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core-Doc</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">PicGo-Doc</a></p><p><a href="https://support.typora.io/Upload-Image/#picgo-core-command-line-opensource">Typora Doc</a></p><p><a href="https://tinypng.com/">TinyPNG</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> Github </tag>
            
            <tag> TinyPNG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用RaspAP將樹莓派變身為無線路由器</title>
      <link href="/20210522/1747559436/"/>
      <url>/20210522/1747559436/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-RaspAP-將樹莓派變身為無線路由器"><a href="#使用-RaspAP-將樹莓派變身為無線路由器" class="headerlink" title="使用 RaspAP 將樹莓派變身為無線路由器"></a>使用 RaspAP 將樹莓派變身為無線路由器</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由於租屋處的無線路由器壞了，正好手邊有一台樹莓派閒置著，就把它拿來當作暫時的路由器來使用。</p><hr><h2 id="安裝-RaspAP"><a href="#安裝-RaspAP" class="headerlink" title="安裝 RaspAP"></a>安裝 RaspAP</h2><ul><li><p>更新套件列表</p><p>在安裝之前，我們要先將系統套件列表更新，才能安裝到最新版的 RaspAP。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get full-upgrade</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></li><li><p>安裝<a href="https://raspap.com/">RaspAP</a>，讓樹莓派具有 AP 功能 (Hotspot)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://install.raspap.com | bash</span><br></pre></td></tr></table></figure><p>在安裝過程中會有一些選項，可以根據你的需求來選擇即可。 (預設都選擇 Y)</p><p>安裝完成後，輸入<code>sudo reboot</code>，來重開樹莓派。</p></li></ul><hr><h2 id="設定-RaspAP"><a href="#設定-RaspAP" class="headerlink" title="設定 RaspAP"></a>設定 RaspAP</h2><p>重開完成在瀏覽器輸入<a href="http://raspberrypi.local/">http://raspberrypi.local/</a>進入管理頁面：</p><p>預設的 Username: <code>admin</code> Password: <code>secret</code></p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/%E6%88%AA%E5%9C%96%202021-05-19%20%E4%B8%8A%E5%8D%883.06.19.png" alt="截圖 2021-05-19 上午3.06.19" style="zoom:50%;" /><p>登入成功後可以看到左上角 Status 的 Hotspot 已經 Active 了。</p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/%E6%88%AA%E5%9C%96%202021-05-19%20%E4%B8%8A%E5%8D%883.59.11.png" alt="截圖 2021-05-19 上午3.59.11" style="zoom:50%;" /><p>接著請點選左邊的<strong>Hotspot</strong>修改<strong>Wireless Mode</strong>，你會發現無法選取 802.11ac 的 5Ghz 頻段，那是因為 802.11ac - 5Ghz 因應各國家的法規不同，RaspAP 預設將 5Ghz 關閉了。</p><blockquote><p><a href="https://docs.raspap.com/faq/#80211ac">RaspAP FAQ</a></p></blockquote><hr><h2 id="開啟-Wireless-Mode-的-802-11ac-5Ghz-頻段"><a href="#開啟-Wireless-Mode-的-802-11ac-5Ghz-頻段" class="headerlink" title="開啟 Wireless Mode 的 802.11ac - 5Ghz 頻段"></a>開啟 Wireless Mode 的 802.11ac - 5Ghz 頻段</h2><p>要開啟 5Ghz 頻段需要先設定樹莓派的連線國別為<code>US</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iw reg <span class="built_in">set</span> US</span><br></pre></td></tr></table></figure><p>然後再到<strong>Hotspot→Advanced</strong>設定<strong>Country Code</strong>為<code>United States</code>，然後 Save settings 及 Restart Hotspot。</p><blockquote><p>PS. 設為澳洲也無法使用 5Ghz，似乎只能使用 US。</p></blockquote><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210519042740771.png" alt="image-20210519042740771" style="zoom:50%;" /><hr><h2 id="其他設備連線到-RaspAP-的-Hotspot"><a href="#其他設備連線到-RaspAP-的-Hotspot" class="headerlink" title="其他設備連線到 RaspAP 的 Hotspot"></a>其他設備連線到 RaspAP 的 Hotspot</h2><p>當 Hotspot 重開完成後，你的手機、電腦就可以使用 WiFi 連線了。</p><p>預設的 SSID 為<code>raspi-webgui</code>，密碼是<code>ChangeMe</code></p><img src="https://raw.githubusercontent.com/NeiL978/PicBed/master/img/image-20210519044317107.png" alt="image-20210519044317107" style="zoom:50%;" /><hr><h2 id="使用-USB-網卡有線連接-RaspAP"><a href="#使用-USB-網卡有線連接-RaspAP" class="headerlink" title="使用 USB 網卡有線連接 RaspAP"></a>使用 USB 網卡有線連接 RaspAP</h2><p>但通常 PC 主機沒有無線網卡，無法使用 WiFi 來連接網路，所以需要使用 USB 網卡來連接有線網路。</p><p>如果直接接上 USB 網卡的話，IP 位址會是<code>169.254.x.x</code>，是無法連接網路的，所以我們需要配置一下。</p><p>首先先說明我的連線設置，我的外網網路線是接在 USB 網卡<code>eth1</code>上，然後 PC 的網路線是接在樹莓派上的 RJ45 接口<code>eth0</code>上，所以我才會設定<code>eth0</code>，正常情況應該是將外網網路接在樹莓派上的<code>eth0</code>、USB 網卡<code>eth1</code>連接 PC。</p><p>編輯樹莓派的<code>/etc/dhcpcd.conf</code>，在最下方添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eth0 configuration</span></span><br><span class="line">interface eth0</span><br><span class="line">static ip_address = 192.168.100.1/24</span><br><span class="line">static domain_name_server =</span><br></pre></td></tr></table></figure><p>然後在<code>/etc/dnsmasq.d/</code>下新增一個<code>eth0.conf</code>檔案，添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface = eth0</span><br><span class="line">dhcp-range = 192.168.100.100, 192.168.100.255, 255.255.255.0, 12h</span><br></pre></td></tr></table></figure><p>重啟<code>dhcpcd</code>和<code>dnsmasq</code>服務。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart dhcpcd</span><br><span class="line">sudo systemctl restart dnsmasq</span><br></pre></td></tr></table></figure><p>透過<code>ifconfig</code>指令，可以看到<code>eth0</code>的 IP 位址已經變更為<code>192.168.100.1</code>了，同時與之相連的 PC 也獲取了該網段的 IP 位址。</p><p>現在 PC 也能愉快的連接網際網路了。</p><blockquote><p><a href="https://raspap.com/">RaspAP</a></p><p><a href="https://www.wyr.me/post/621##toc2-1">树莓派 4 变身旁路由</a></p><p><a href="https://www.youtube.com/watch?v=e5SRagTdMGk">樹莓派 4 變身 5GHz 多功能路由器 RaspAP 免費安裝及開啟 802.11.ac 技巧 Raspberry Pi 4</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 樹莓派 </tag>
            
            <tag> Raspberry Pi </tag>
            
            <tag> RaspAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/20210522/1243066710/"/>
      <url>/20210522/1243066710/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
